<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dray&#39;s Home</title>
  
  <subtitle>疯狂痴呆傻，美甘苦涩禅。</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://idc.wf/"/>
  <updated>2018-05-01T04:16:08.946Z</updated>
  <id>http://idc.wf/</id>
  
  <author>
    <name>Dray</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pi 安装 ssr，cow 备注</title>
    <link href="http://idc.wf/2018/03/28/pi-ssr&amp;cow/"/>
    <id>http://idc.wf/2018/03/28/pi-ssr&amp;cow/</id>
    <published>2018-03-28T09:44:00.000Z</published>
    <updated>2018-05-01T04:16:08.946Z</updated>
    
    <content type="html"><![CDATA[<p>偶尔一次使用的东西，记一下！</p><h2 id="ssr"><a href="#ssr" class="headerlink" title="ssr"></a>ssr</h2><h3 id="安装-python"><a href="#安装-python" class="headerlink" title="安装 python"></a>安装 <strong>python</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip python3-pip git htop</span><br></pre></td></tr></table></figure><h3 id="安装-ssr"><a href="#安装-ssr" class="headerlink" title="安装 ssr"></a>安装 <strong>ssr</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /srv/approot</span><br><span class="line">git clone https://github.com/ToyoDAdoubi/shadowsocksr shadowsocksr-doubi</span><br></pre></td></tr></table></figure><h3 id="配置-ssr"><a href="#配置-ssr" class="headerlink" title="配置 ssr"></a>配置 <strong>ssr</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">nano /srv/approot/ssr-config/jp1.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_ipv6&quot;: &quot;::&quot;,</span><br><span class="line">    &quot;server_port&quot;: 8388,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;: 1080,</span><br><span class="line"></span><br><span class="line">    &quot;password&quot;: &quot;m&quot;,</span><br><span class="line">    &quot;method&quot;: &quot;aes-128-ctr&quot;,</span><br><span class="line">    &quot;protocol&quot;: &quot;auth_aes128_md5&quot;,</span><br><span class="line">    &quot;protocol_param&quot;: &quot;&quot;,</span><br><span class="line">    &quot;obfs&quot;: &quot;tls1.2_ticket_auth_compatible&quot;,</span><br><span class="line">    &quot;obfs_param&quot;: &quot;&quot;,</span><br><span class="line">    &quot;speed_limit_per_con&quot;: 0,</span><br><span class="line">    &quot;speed_limit_per_user&quot;: 0,</span><br><span class="line"></span><br><span class="line">    &quot;additional_ports&quot; : &#123;&#125;, // only works under multi-user mode</span><br><span class="line">    &quot;timeout&quot;: 120,</span><br><span class="line">    &quot;udp_timeout&quot;: 60,</span><br><span class="line">    &quot;dns_ipv6&quot;: false,</span><br><span class="line">    &quot;connect_verbose_info&quot;: 0,</span><br><span class="line">    &quot;redirect&quot;: &quot;&quot;,</span><br><span class="line">    &quot;fast_open&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动-ssr-服务"><a href="#启动-ssr-服务" class="headerlink" title="启动 ssr 服务"></a>启动 <strong>ssr</strong> 服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo python3 /srv/approot/shadowsocksr-doubi/shadowsocks/local.py \</span><br><span class="line">    -c /srv/approot/ssr-config/jp1.json \</span><br><span class="line">    --pid-file /var/run/shadowsocks-rix.pid \</span><br><span class="line">    -d start</span><br></pre></td></tr></table></figure><p>这样的话，ssr 服务就起来了，需要启动多个的话，修改 Pid file 的路径就可以了。</p><h2 id="cow"><a href="#cow" class="headerlink" title="cow"></a>cow</h2><h3 id="安装-golang"><a href="#安装-golang" class="headerlink" title="安装 golang"></a>安装 <strong>golang</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mkdir /srv/approot</span><br><span class="line">cd /srv/approot</span><br><span class="line">wget https://dl.google.com/go/go1.10.linux-armv6l.tar.gz</span><br><span class="line">sudo -xzf go1.10.linux-armv6l.tar.gz</span><br><span class="line">cd /usr/local</span><br><span class="line">ln -s /srv/approot/go</span><br><span class="line">cd /usr/local/bin</span><br><span class="line">ln -s /srv/approot/go/bin/go</span><br><span class="line">ln -s /srv/approot/go/bin/godoc</span><br><span class="line">ln -s /srv/approot/go/bin/gofmt</span><br></pre></td></tr></table></figure><h3 id="安装-cow"><a href="#安装-cow" class="headerlink" title="安装 cow"></a>安装 <strong>cow</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/cyfdecyf/cow</span><br></pre></td></tr></table></figure><h3 id="配置-cow"><a href="#配置-cow" class="headerlink" title="配置 cow"></a>配置 <strong>cow</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.cow/rc</span><br><span class="line"></span><br><span class="line">listen = http://127.0.0.1:7777</span><br><span class="line"></span><br><span class="line"># SOCKS5 二级代理</span><br><span class="line">proxy = socks5://127.0.0.1:1080</span><br><span class="line">proxy = socks5://127.0.0.1:1081</span><br></pre></td></tr></table></figure><h3 id="配置-cow-启动脚本"><a href="#配置-cow-启动脚本" class="headerlink" title="配置 cow 启动脚本"></a>配置 <strong>cow</strong> 启动脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://github.com/cyfdecyf/cow/blob/master/doc/init.d/cow /etc/init.d/cow</span><br><span class="line">sudo /etc/init.d/cow</span><br><span class="line"></span><br><span class="line">修改</span><br><span class="line">USER=pi</span><br><span class="line">GROUP=root</span><br></pre></td></tr></table></figure><h2 id="参考页面"><a href="#参考页面" class="headerlink" title="参考页面"></a>参考页面</h2><p><a href="https://doub.io/ss-jc45/" target="_blank" rel="noopener">https://doub.io/ss-jc45/</a><br><a href="https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/Python-client-setup-(Mult-language)" target="_blank" rel="noopener">https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/Python-client-setup-(Mult-language)</a><br><a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a><br><a href="https://github.com/cyfdecyf/cow" target="_blank" rel="noopener">https://github.com/cyfdecyf/cow</a><br><a href="https://www.wandianshenme.com/play/use-golang-build-iot-application-on-raspberry-pi/" target="_blank" rel="noopener">https://www.wandianshenme.com/play/use-golang-build-iot-application-on-raspberry-pi/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;偶尔一次使用的东西，记一下！&lt;/p&gt;
&lt;h2 id=&quot;ssr&quot;&gt;&lt;a href=&quot;#ssr&quot; class=&quot;headerlink&quot; title=&quot;ssr&quot;&gt;&lt;/a&gt;ssr&lt;/h2&gt;&lt;h3 id=&quot;安装-python&quot;&gt;&lt;a href=&quot;#安装-python&quot; class=&quot;
      
    
    </summary>
    
      <category term="linux" scheme="http://idc.wf/category/linux/"/>
    
    
      <category term="pi" scheme="http://idc.wf/tags/pi/"/>
    
      <category term="ssr" scheme="http://idc.wf/tags/ssr/"/>
    
      <category term="ss" scheme="http://idc.wf/tags/ss/"/>
    
      <category term="cow" scheme="http://idc.wf/tags/cow/"/>
    
  </entry>
  
  <entry>
    <title>yii2 用 asset 压缩js,css文件</title>
    <link href="http://idc.wf/2017/07/10/yii-asset/"/>
    <id>http://idc.wf/2017/07/10/yii-asset/</id>
    <published>2017-07-10T09:44:00.000Z</published>
    <updated>2018-05-01T04:16:08.946Z</updated>
    
    <content type="html"><![CDATA[<p>偶尔一次使用的东西，记一下！</p><h2 id="安装-java"><a href="#安装-java" class="headerlink" title="安装 java"></a>安装 <strong>java</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install default-jre</span><br></pre></td></tr></table></figure><h2 id="安装压缩工具"><a href="#安装压缩工具" class="headerlink" title="安装压缩工具"></a>安装压缩工具</h2><h3 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h3><p>Yii 压缩 JavaScript 默认使用名为 compiler.jar 的 Google Closure compiler 压缩工具。<br><a href="https://developers.google.com/closure/compiler/" target="_blank" rel="noopener">https://developers.google.com/closure/compiler/</a></p><h3 id="yuicompressor"><a href="#yuicompressor" class="headerlink" title="yuicompressor"></a>yuicompressor</h3><p>Yii 压缩 CSS 使用名为 yuicompressor.jar 的YUI Compressor 压缩工具。<br><a href="https://github.com/yui/yuicompressor/" target="_blank" rel="noopener">https://github.com/yui/yuicompressor/</a></p><h2 id="生成默认配置脚本"><a href="#生成默认配置脚本" class="headerlink" title="生成默认配置脚本"></a>生成默认配置脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yii asset/template asset.php</span><br></pre></td></tr></table></figure><p>生成的模板如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * &quot;yii asset&quot; 控制台命令的配置文件</span><br><span class="line"> * 注意控制台环境下有些路径别名可能不存在，如 &apos;@webroot&apos; 和 &apos;@web&apos;</span><br><span class="line"> * 请先定义找不到的路径别名</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// In the console environment, some path aliases may not exist. Please define these:</span><br><span class="line">Yii::setAlias(&apos;@webroot&apos;, __DIR__ . &apos;/backend/web/&apos;);</span><br><span class="line">Yii::setAlias(&apos;@web&apos;, &apos;/backend/web/&apos;);</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line">    // 为 JavaScript 文件压缩调整 command/callback 命令：</span><br><span class="line">    &apos;jsCompressor&apos; =&gt; &apos;java -jar compiler.jar --js &#123;from&#125; --js_output_file &#123;to&#125;&apos;,</span><br><span class="line">    // 为 CSS 文件压缩调整 command/callback 命令：</span><br><span class="line">    &apos;cssCompressor&apos; =&gt; &apos;java -jar yuicompressor.jar --type css &#123;from&#125; -o &#123;to&#125;&apos;,</span><br><span class="line">    // 要压缩的资源包列表：</span><br><span class="line">    &apos;bundles&apos; =&gt; [</span><br><span class="line">        &apos;backend\assets\AppAsset&apos;,</span><br><span class="line">        // &apos;yii\web\YiiAsset&apos;,</span><br><span class="line">        // &apos;yii\web\JqueryAsset&apos;,</span><br><span class="line">    ],</span><br><span class="line">    // 输出的已压缩资源包：</span><br><span class="line">    &apos;targets&apos; =&gt; [</span><br><span class="line">        &apos;app\config\AllAsset&apos; =&gt; [</span><br><span class="line">            &apos;basePath&apos; =&gt; &apos;path/to/web&apos;,</span><br><span class="line">            &apos;baseUrl&apos; =&gt; &apos;&apos;,</span><br><span class="line">            &apos;js&apos; =&gt; &apos;js/all-&#123;ts&#125;.js&apos;,</span><br><span class="line">            &apos;css&apos; =&gt; &apos;css/all-&#123;ts&#125;.css&apos;,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    // 资源管理器配置：</span><br><span class="line">    &apos;assetManager&apos; =&gt; [</span><br><span class="line">        &apos;basePath&apos; =&gt; &quot;@webroot&quot;,</span><br><span class="line">        &apos;baseUrl&apos; =&gt; &apos;@web&apos;,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h2 id="执行脚本压缩生成配置文件"><a href="#执行脚本压缩生成配置文件" class="headerlink" title="执行脚本压缩生成配置文件"></a>执行脚本压缩生成配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php yii asset/compress assets_backend.php backend/config/assets_compressed.php</span><br></pre></td></tr></table></figure><h2 id="把生成的配置文件加到主配置中"><a href="#把生成的配置文件加到主配置中" class="headerlink" title="把生成的配置文件加到主配置中"></a>把生成的配置文件加到主配置中</h2><p>修改 config/main.php 添加下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;components&apos; =&gt; [</span><br><span class="line">    // ...</span><br><span class="line">    &apos;assetManager&apos; =&gt; [</span><br><span class="line">        &apos;bundles&apos; =&gt; require &apos;assets_compressed.php&apos;,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><h2 id="参考页面"><a href="#参考页面" class="headerlink" title="参考页面"></a>参考页面</h2><p><a href="http://www.yiifans.com/yii2/guide/structure-assets.html" target="_blank" rel="noopener">http://www.yiifans.com/yii2/guide/structure-assets.html</a><br><a href="http://www.cnblogs.com/zergling9999/p/6097783.html" target="_blank" rel="noopener">http://www.cnblogs.com/zergling9999/p/6097783.html</a><br><a href="http://mayi.so/article/4" target="_blank" rel="noopener">http://mayi.so/article/4</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;偶尔一次使用的东西，记一下！&lt;/p&gt;
&lt;h2 id=&quot;安装-java&quot;&gt;&lt;a href=&quot;#安装-java&quot; class=&quot;headerlink&quot; title=&quot;安装 java&quot;&gt;&lt;/a&gt;安装 &lt;strong&gt;java&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=
      
    
    </summary>
    
      <category term="linux" scheme="http://idc.wf/category/linux/"/>
    
    
      <category term="yii2" scheme="http://idc.wf/tags/yii2/"/>
    
      <category term="asset" scheme="http://idc.wf/tags/asset/"/>
    
  </entry>
  
  <entry>
    <title>使用 acme.sh 来更新 letsencrypt 证书</title>
    <link href="http://idc.wf/2017/06/21/letsencrypt-cert/"/>
    <id>http://idc.wf/2017/06/21/letsencrypt-cert/</id>
    <published>2017-06-21T04:55:52.000Z</published>
    <updated>2018-05-01T04:16:08.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装-acme-sh"><a href="#1-安装-acme-sh" class="headerlink" title="1. 安装 acme.sh"></a>1. 安装 <strong>acme.sh</strong></h1><p>安装很简单, 一个命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure></p><p>普通用户和 root 用户都可以安装使用.<br>安装过程进行了以下几步:</p><p>1) 把 acme.sh 安装到你的 <strong>home</strong> 目录下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.acme.sh/</span><br></pre></td></tr></table></figure><p>并创建 一个 bash 的 alias, 方便你的使用:  <code>acme.sh=~/.acme.sh/acme.sh</code></p><p>2). 自动为你创建 cronjob,  每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.</p><p>更高级的安装选项请参考: <a href="https://github.com/Neilpang/acme.sh/wiki/How-to-install" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/How-to-install</a></p><p><strong>安装过程不会污染已有的系统任何功能和文件</strong>, 所有的修改都限制在安装目录中: <code>~/.acme.sh/</code></p><h1 id="2-生成证书"><a href="#2-生成证书" class="headerlink" title="2. 生成证书"></a>2. 生成证书</h1><h2 id="1-dns-方式-在域名上添加一条-txt-解析记录-验证域名所有权"><a href="#1-dns-方式-在域名上添加一条-txt-解析记录-验证域名所有权" class="headerlink" title="1. dns 方式, 在域名上添加一条 txt 解析记录, 验证域名所有权."></a>1. dns 方式, 在域名上添加一条 txt 解析记录, 验证域名所有权.</h2><p>这种方式的好处是, 你不需要任何服务器, 不需要任何公网 ip, 只需要 dns 的解析记录即可完成验证.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue  --dns   -d mydomain.com</span><br></pre></td></tr></table></figure><p>然后, <strong>acme.sh</strong> 会生成相应的解析记录显示出来, 你只需要在你的域名管理面板中添加这条 txt 记录即可.</p><p>等待解析完成之后, 重新生成证书:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --renew   -d mydomain.com</span><br></pre></td></tr></table></figure></p><p>注意第二次这里用的是 <code>--renew</code></p><p>更详细的 api 用法: <a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md</a></p><h1 id="3-copy-安装-证书"><a href="#3-copy-安装-证书" class="headerlink" title="3. copy/安装 证书"></a>3. copy/安装 证书</h1><p>前面证书生成以后, 接下来需要把证书 copy 到真正需要用它的地方.</p><p>注意, 默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>,  请不要直接使用此目录下的文件, 例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.</p><p>正确的使用方法是使用 <code>--installcert</code> 命令,并指定目标位置, 然后证书文件会被copy到相应的位置,<br>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --installcert  -d  mydomain.com   \</span><br><span class="line">        --key-file   /etc/nginx/ssl/mydomain.key \</span><br><span class="line">        --fullchain-file /etc/nginx/ssl/mydonain.cer \</span><br><span class="line">        --reloadcmd  &quot;service nginx force-reload&quot;</span><br></pre></td></tr></table></figure></p><p>(一个小提醒, 这里用的是 <code>service nginx force-reload</code>, 不是 <code>service nginx reload</code>, 据测试, <code>reload</code> 并不会重新加载证书, 所以用的 <code>force-reload</code>)</p><p><code>--installcert</code>命令可以携带很多参数, 来指定目标文件.  并且可以指定 reloadcmd, 当证书更新以后, reloadcmd会被自动调用,让服务器生效.</p><p>详细参数请参考: <a href="https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc</a></p><p>值得注意的是, 这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用.</p><h1 id="4-更新证书"><a href="#4-更新证书" class="headerlink" title="4. 更新证书"></a>4. 更新证书</h1><p>目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.</p><h1 id="5-更新-acme-sh"><a href="#5-更新-acme-sh" class="headerlink" title="5. 更新 acme.sh"></a>5. 更新 acme.sh</h1><p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步. </p><p>升级 acme.sh 到最新版 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --upgrade</span><br></pre></td></tr></table></figure></p><p>如果你不想手动升级, 可以开启自动升级:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --upgrade  --auto-upgrade</span><br></pre></td></tr></table></figure><p>之后, acme.sh 就会自动保持更新了.</p><p>你也可以随时关闭自动更新:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --upgrade  --auto-upgrade  0</span><br></pre></td></tr></table></figure><h1 id="6-出错怎么办："><a href="#6-出错怎么办：" class="headerlink" title="6. 出错怎么办："></a>6. 出错怎么办：</h1><p>如果出错, 请添加 debug log：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue  .....  --debug</span><br></pre></td></tr></table></figure><p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue  .....  --debug  2</span><br></pre></td></tr></table></figure></p><p>请参考： <a href="https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh</a></p><p>最后, 本文并非完全的使用说明, 还有很多高级的功能, 更高级的用法请参看其他 wiki 页面.</p><p><a href="https://github.com/Neilpang/acme.sh/wiki" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-安装-acme-sh&quot;&gt;&lt;a href=&quot;#1-安装-acme-sh&quot; class=&quot;headerlink&quot; title=&quot;1. 安装 acme.sh&quot;&gt;&lt;/a&gt;1. 安装 &lt;strong&gt;acme.sh&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;安装很简单, 一个命令
      
    
    </summary>
    
      <category term="linux" scheme="http://idc.wf/category/linux/"/>
    
    
      <category term="letsencrypt" scheme="http://idc.wf/tags/letsencrypt/"/>
    
      <category term="acme" scheme="http://idc.wf/tags/acme/"/>
    
  </entry>
  
  <entry>
    <title>html 转为 pdf</title>
    <link href="http://idc.wf/2017/06/01/html-to-pdf/"/>
    <id>http://idc.wf/2017/06/01/html-to-pdf/</id>
    <published>2017-06-01T16:00:00.000Z</published>
    <updated>2018-05-01T04:16:08.942Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>使用 wkhtmltopdf</p><ol><li><p>安装</p><ol><li>下载地址：<a href="https://wkhtmltopdf.org/downloads.html" target="_blank" rel="noopener">https://wkhtmltopdf.org/downloads.html</a></li><li>Linux 环境下， 0.12.4 版本有问题，需要使用 0.12.3 版本。</li><li>不要使用 apt install 的方式安装，安装的为 0.12.4 版本。</li></ol></li><li><p>示例代码</p><ol><li><p>python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import pdfkit</span><br><span class="line"></span><br><span class="line">pdfkit.from_url(&apos;https://wkhtmltopdf.org/docs.html&apos;, &apos;out.pdf&apos;)</span><br><span class="line"># pdfkit.from_file(&apos;test.html&apos;, &apos;out.pdf&apos;)</span><br><span class="line"># pdfkit.from_string(&apos;Hello!&apos;, &apos;out.pdf&apos;)</span><br></pre></td></tr></table></figure></li><li><p>php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include &apos;./vendor/autoload.php&apos;;</span><br><span class="line"></span><br><span class="line">use mikehaertl\wkhtmlto\Pdf;</span><br><span class="line"></span><br><span class="line">if (empty($_GET[&apos;url&apos;])) &#123;</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$pdf = new Pdf($_GET[&apos;url&apos;]);</span><br><span class="line">$pdf-&gt;send();</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用 wkhtmltopdf&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载地址：&lt;a href=&quot;https://wkhtmltopdf.org/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
      <category term="linux" scheme="http://idc.wf/category/linux/"/>
    
    
      <category term="vps" scheme="http://idc.wf/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>Composer 常用 PHP 小工具</title>
    <link href="http://idc.wf/2017/03/09/composer-tools/"/>
    <id>http://idc.wf/2017/03/09/composer-tools/</id>
    <published>2017-03-09T08:07:07.000Z</published>
    <updated>2018-05-01T04:16:08.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Composer-常用-PHP-小工具"><a href="#Composer-常用-PHP-小工具" class="headerlink" title="Composer 常用 PHP 小工具"></a>Composer 常用 PHP 小工具</h2><p>composer 安装方法:<br><a href="https://getcomposer.org/doc/00-intro.md#installation-windows" target="_blank" rel="noopener">https://getcomposer.org/doc/00-intro.md#installation-windows</a></p><p>常用小工具:</p><pre><code>composer global require composer/composercomposer global require phpmd/phpmdcomposer global require phpunit/dbunitcomposer global require phpunit/phpunitcomposer global require sebastian/phpcpdcomposer global require justinrainbow/json-schemacomposer global require phpdocumentor/phpdocumentorcomposer global require sami/samicomposer global require squizlabs/php_codesniffercomposer global require fabpot/php-cs-fixercomposer global require friendsofphp/php-cs-fixer</code></pre><p>相关文档:<br><a href="http://www.chrisyue.com/use-composer-to-install-php-libs-elegantly.html" target="_blank" rel="noopener">http://www.chrisyue.com/use-composer-to-install-php-libs-elegantly.html</a><br><a href="https://akrabat.com/global-installation-of-php-tools-with-composer/" target="_blank" rel="noopener">https://akrabat.com/global-installation-of-php-tools-with-composer/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Composer-常用-PHP-小工具&quot;&gt;&lt;a href=&quot;#Composer-常用-PHP-小工具&quot; class=&quot;headerlink&quot; title=&quot;Composer 常用 PHP 小工具&quot;&gt;&lt;/a&gt;Composer 常用 PHP 小工具&lt;/h2&gt;&lt;p&gt;co
      
    
    </summary>
    
      <category term="web" scheme="http://idc.wf/category/web/"/>
    
    
      <category term="php" scheme="http://idc.wf/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Babyun 平板刷机</title>
    <link href="http://idc.wf/2016/05/18/babyun-pad/"/>
    <id>http://idc.wf/2016/05/18/babyun-pad/</id>
    <published>2016-05-18T07:18:00.000Z</published>
    <updated>2018-05-01T04:16:08.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事由"><a href="#事由" class="headerlink" title="事由"></a>事由</h2><p>120 块钱在 <a href="http://www.v2ex.com/t/276507?p=1" target="_blank" rel="noopener">v2ex</a> 上买了一个平板，至于买来干嘛？没想多。<br>于是，这里记录下刷机过程，省得之后再找。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>感谢 <a href="http://www.v2ex.com/t/276507?p=1" target="_blank" rel="noopener">@mimzy</a></p><pre><code>@mimzy :    @slitaz 官方固件和刷机工具，找 M80 ，我用的是 AZ 批次： http://www.yuandaocn.com/fwzc_detail/&amp;i=15&amp;comContentId=15.html 改大分区教程： http://tieba.baidu.com/p/3324227239     为了确保驱动兼容性可能需要 Windows XP 系统，如果 SP Flash Tool 报错「由于应用程序配置不正确，应用程序未能启动」需要装 Microsoft Visual C++ 2008 Redistributable ， root 什么的感觉没必要折腾就没弄。</code></pre><h2 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h2><p>刷机工具和分区调整补丁： <a href="https://pan.baidu.com/s/1eRL86Eu" target="_blank" rel="noopener">百度云</a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>刷机之前拔掉电脑上连接的所有手机设备。</li><li>点击 download 下载 之后插上平板，等待自动刷机。</li><li>刷机工具弹出成功之后拔掉平板开机。</li><li>刷完之后记得摁 音量减 + 电源 进入工厂模式，选择 “清除EMMC” ，然后就可以愉快的玩耍了。</li></ol><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="http://www.v2ex.com/t/276507?p=1" target="_blank" rel="noopener">出公司定制的 二手 8 寸平板， 120 元/台(非特殊地区包邮)</a><br><a href="http://tieba.baidu.com/p/3324227239?see_lz=1" target="_blank" rel="noopener">【线刷】原道 M80 Data 大分区 补丁</a><br><a href="http://www.yuandaocn.com/fwzc_detail/&amp;i=15&amp;comContentId=15.html" target="_blank" rel="noopener">Vido 原道 下载中心</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;事由&quot;&gt;&lt;a href=&quot;#事由&quot; class=&quot;headerlink&quot; title=&quot;事由&quot;&gt;&lt;/a&gt;事由&lt;/h2&gt;&lt;p&gt;120 块钱在 &lt;a href=&quot;http://www.v2ex.com/t/276507?p=1&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="diary" scheme="http://idc.wf/category/diary/"/>
    
    
      <category term="babyun" scheme="http://idc.wf/tags/babyun/"/>
    
      <category term="android" scheme="http://idc.wf/tags/android/"/>
    
      <category term="mt8127" scheme="http://idc.wf/tags/mt8127/"/>
    
      <category term="yuandao" scheme="http://idc.wf/tags/yuandao/"/>
    
  </entry>
  
  <entry>
    <title>使用Travis CI自动部署Hexo</title>
    <link href="http://idc.wf/2016/05/13/travis-ci/"/>
    <id>http://idc.wf/2016/05/13/travis-ci/</id>
    <published>2016-05-13T12:05:00.000Z</published>
    <updated>2018-05-01T04:16:08.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前换过很多的静态博客系统，但是每个系统都需要本地做一定的部署，这点很麻烦。<br><a href="https://github.com/wendal/gor" target="_blank" rel="noopener">Gor</a> 倒是有可执行文件，但是本地部署的时候还是需要合并提交代码，还是略不爽。<br>今天在查 CI 系统的时候发现了 <a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a> ,于是，一切都很开心了。</p><h2 id="关于-Travis-CI"><a href="#关于-Travis-CI" class="headerlink" title="关于 Travis CI"></a>关于 Travis CI</h2><p>这是一个通过脚本来进行自动部署的系统，本身与 Github 高度集成，目前对于公开的项目免费支持。</p><h2 id="开启travis-ci"><a href="#开启travis-ci" class="headerlink" title="开启travis-ci"></a>开启travis-ci</h2><p>首先去 <a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a> 官网，点击右上角Sign in with GitHub通过github授权登录。然后去到个人信息页面，开启需要使用 travis 的项目，在我这里就是 DrayChou/Blog-Hexo 。</p><h2 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h2><p>因为需要通过脚本提交到 Github ，所以需要先申请一个 token ，避免密码或者证书问题造成的麻烦。<br>Token 申请地址是 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a> 。<br>记得给予 public_repo 的权限，要不无法提交修改到 GitHub。<br>记得这个 token ，后面会用到。</p><h2 id="Travis-CI-的命令行工具"><a href="#Travis-CI-的命令行工具" class="headerlink" title="Travis CI 的命令行工具"></a>Travis CI 的命令行工具</h2><h3 id="执行下面的命令安装命令行工具。"><a href="#执行下面的命令安装命令行工具。" class="headerlink" title="执行下面的命令安装命令行工具。"></a>执行下面的命令安装命令行工具。</h3><pre><code>gem install travis</code></pre><h3 id="生成脚本"><a href="#生成脚本" class="headerlink" title="生成脚本"></a>生成脚本</h3><p>切换到 blog 的目录下，执行下面的命令，记得输入 node 语言</p><pre><code>$ travis initdetected repository as DrayChou/Blog-PugoMain programming language used: |HTML| node.travis.yml file created!enabled</code></pre><h2 id="设置脚本"><a href="#设置脚本" class="headerlink" title="设置脚本"></a>设置脚本</h2><p>编辑这个 .travis.yml ，按需添加对应的项。 env.global.secure 是发布的时候生成的数据，请无视。</p><pre><code>language: node_jsnode_js:- &apos;5.1&apos;env:  global:  - secure: &quot;long secure base64 string&quot;before_install:- export TZ=Asia/ShangHaiinstall:- npm installscript:# 初始化 GIT- git config --global user.name &quot;$GIT_NAME&quot;- git config --global user.email &quot;$GIT_EMAIL&quot;- git config --global push.default simple# 设置项目路径- rm -rf public- git clone --depth 50 --branch gh-pages https://$GH_TOKEN@github.com/$GIT_NAME/$HEXO_BLOG public# 生成- hexo generate# 发布出去- cd public- git add -A .- MESSAGE=`date +\ %Y-%m-%d\ %H:%M:%S`- git commit -m &quot;Site updated:$MESSAGE&quot;- git push origin gh-pages --quiet</code></pre><h2 id="执行下面的命令添加执行操作"><a href="#执行下面的命令添加执行操作" class="headerlink" title="执行下面的命令添加执行操作"></a>执行下面的命令添加执行操作</h2><p>命令的参数请自行替换。</p><pre><code>travis encrypt &apos;GIT_NAME=&quot;&lt;Personal GitHub Name&gt;&quot; GIT_EMAIL=&quot;&lt;Personal GitHub Email&gt;&quot; HEXO_BLOG=&quot;&lt;Personal Blog Repositories&gt;&quot; GH_TOKEN=&quot;&lt;Personal Access Token&gt;&quot;&apos; --add</code></pre><p>命令执行完毕之后会自动修改 .travis.yml 添加对应的 env.global.secure。<br>把这个文件提交到 Github。</p><h2 id="开始执行"><a href="#开始执行" class="headerlink" title="开始执行"></a>开始执行</h2><p>Push 到 Github 之后， Github 就会通过之前定义的 hook 去调用 travis ,然后 travis 就会在后台开始按照脚本执行，可以在 <a href="https://travis-ci.org/" target="_blank" rel="noopener">travis-ci</a> 后台通过查看日志观察发布有没有问题，如果有问题再按照提示进行调试。</p><h2 id="附记"><a href="#附记" class="headerlink" title="附记"></a>附记</h2><p><a href="http://ssk7833.github.io/blog/2016/01/21/using-TravisCI-to-deploy-on-GitHub-pages/" target="_blank" rel="noopener">注意：git push 時一定要加 –quiet，否則先前設定的 Personal Access Token 將會印出，這樣就失去加密意義了。</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://ssk7833.github.io/blog/2016/01/21/using-TravisCI-to-deploy-on-GitHub-pages/" target="_blank" rel="noopener">使用 Travis CI 自動部署 GitHub Pages</a></li><li><a href="http://w3cboy.com/post/2016/03/travisci-hexo-deploy/" target="_blank" rel="noopener">使用travis-ci自动部署hexo博客</a></li><li><a href="https://hexo.io/zh-tw/docs/commands.html#generate" target="_blank" rel="noopener">hexo 指令</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前换过很多的静态博客系统，但是每个系统都需要本地做一定的部署，这点很麻烦。&lt;br&gt;&lt;a href=&quot;https://github.com/
      
    
    </summary>
    
      <category term="web" scheme="http://idc.wf/category/web/"/>
    
    
      <category term="travis-ci" scheme="http://idc.wf/tags/travis-ci/"/>
    
      <category term="ci" scheme="http://idc.wf/tags/ci/"/>
    
      <category term="hexo" scheme="http://idc.wf/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>virtualbox ubuntu 下面安装 redmine</title>
    <link href="http://idc.wf/2016/03/12/vbox-ubuntu-nginx-redmine/"/>
    <id>http://idc.wf/2016/03/12/vbox-ubuntu-nginx-redmine/</id>
    <published>2016-03-12T07:40:12.000Z</published>
    <updated>2018-05-01T04:16:08.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-ubuntu"><a href="#安装-ubuntu" class="headerlink" title="安装 ubuntu"></a>安装 ubuntu</h2><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><p>然后在 vb 中配置安装 ubuntu ，这里需要注意的是，把网络类型改为 桥接。</p><h3 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h3><pre><code>sudo vi /etc/network/interfaces</code></pre><p>原有内容只有如下两行：</p><pre><code>auto loiface lo inet loopback</code></pre><p>如果是动态获取IP地址，那么就不需要添加如下内容<br>如果设置静态IP,向末尾追加以下内容：</p><pre><code>auto eth0iface eth0 inet staticaddress 静态IP地址gateway 192.168.0.1netmask 255.255.255.0</code></pre><p>然后保存退出；</p><h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><p>更新源： /etc/apt/sources.list<br>阿里更新源（14.04）</p><pre><code>deb http://mirrors.aliyun.com/ubuntu/ trusty main multiverse restricted universedeb http://mirrors.aliyun.com/ubuntu/ trusty-backports main multiverse restricted universedeb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main multiverse restricted universedeb http://mirrors.aliyun.com/ubuntu/ trusty-security main multiverse restricted universedeb http://mirrors.aliyun.com/ubuntu/ trusty-updates main multiverse restricted universedeb-src http://mirrors.aliyun.com/ubuntu/ trusty main multiverse restricted universedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main multiverse restricted universedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main multiverse restricted universedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main multiverse restricted universedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main multiverse restricted universe</code></pre><h3 id="vbox-组件"><a href="#vbox-组件" class="headerlink" title="vbox 组件"></a>vbox 组件</h3><pre><code>sudo apt-get install virtualbox-guest-dkms</code></pre><h3 id="设置共享目录"><a href="#设置共享目录" class="headerlink" title="设置共享目录"></a>设置共享目录</h3><pre><code>ln -s /media/sf_Downloads /srv/download</code></pre><h3 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h3><p>使用以下命令添加当前用户到 vboxsf 组，以免权限不足编辑共享目录，重启虚拟机生效。</p><pre><code>sudo usermod -aG vboxsf $(whoami)sudo usermod -aG vboxsf www-data</code></pre><h2 id="配置-ssh"><a href="#配置-ssh" class="headerlink" title="配置 ssh"></a>配置 ssh</h2><h3 id="安装-ssh-服务端"><a href="#安装-ssh-服务端" class="headerlink" title="安装 ssh 服务端"></a>安装 ssh 服务端</h3><pre><code>sudo apt-get install openssh-server</code></pre><h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><pre><code>sudo server ssh restart</code></pre><h2 id="配置-mysql"><a href="#配置-mysql" class="headerlink" title="配置 mysql"></a>配置 mysql</h2><h3 id="安装-mysql"><a href="#安装-mysql" class="headerlink" title="安装 mysql"></a>安装 mysql</h3><pre><code>sudo apt-get install mysql-server</code></pre><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre><code>mysql -u root -pCREATE DATABASE redmine CHARACTER SET utf8;CREATE USER &apos;redmine&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;my_password&apos;;GRANT ALL PRIVILEGES ON redmine.* TO &apos;redmine&apos;@&apos;localhost&apos;;EXIT</code></pre><h3 id="设置远程访问权限"><a href="#设置远程访问权限" class="headerlink" title="设置远程访问权限"></a>设置远程访问权限</h3><pre><code>grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;password&apos; with grant option;flush privileges;</code></pre><h3 id="打開-my-conf"><a href="#打開-my-conf" class="headerlink" title="打開 my.conf"></a>打開 my.conf</h3><pre><code>sudo vim /etc/mysql/my.cnf</code></pre><h3 id="设置服务器地址"><a href="#设置服务器地址" class="headerlink" title="设置服务器地址"></a>设置服务器地址</h3><pre><code>bind-address            = 0.0.0.0</code></pre><h2 id="配置-ruby"><a href="#配置-ruby" class="headerlink" title="配置 ruby"></a>配置 ruby</h2><h3 id="安装-rvm"><a href="#安装-rvm" class="headerlink" title="安装 rvm"></a>安装 rvm</h3><p>輸入指令安裝 RVM，過程中可能會出現一些錯誤訊息，因為我沒有預先使用 apt-get 安裝需要的套件。不過不要緊，跟著系統會告訴哪些還沒裝好，並且會給你安裝的指令，跟著系統指示很快的就可以完成。</p><pre><code>curl -L https://get.rvm.io | bash</code></pre><p>重新登入 vps，輸入 rvm -v 查看 rvm 是否有裝好。</p><p>在 RVM 中安裝 Ruby</p><pre><code>rvm install 2.2.3</code></pre><p>將 ruby 2.2.3 設定成預設的 Ruby 語言，這個動作很重要一定要做，因為預設的 Ruby 會是 Ubuntu 系統中預裝的版本，換成 RVM 的版本我們才好處理 Gem 之類的安裝問題</p><pre><code>rvm use 2.2.3 --default</code></pre><p>檢查系統中的 ruby 是否使用 rvm 的 ruby</p><p>輸入ruby -v檢查版本<br>輸入which ruby 檢查路徑，路徑裡面有 rvm 的才是正確</p><h3 id="修改-gem-source"><a href="#修改-gem-source" class="headerlink" title="修改 gem source"></a>修改 gem source</h3><pre><code>gem sources -r https://rubygems.org/gem source -a https://ruby.taobao.orggem source -l   // 查看当前的source</code></pre><h3 id="修改-bundle-source"><a href="#修改-bundle-source" class="headerlink" title="修改 bundle source"></a>修改 bundle source</h3><pre><code>bundle config mirror.https://rubygems.org https://ruby.taobao.org</code></pre><h3 id="安裝-Rails"><a href="#安裝-Rails" class="headerlink" title="安裝 Rails"></a>安裝 Rails</h3><p>記得加上 –no-ri –no-rdoc ，意思是不要裝文件，因為我們上網查就好了。可以省下很多時間。</p><pre><code>gem install rails --no-ri --no-rdoc</code></pre><h3 id="把-Redmine-專案載下來，"><a href="#把-Redmine-專案載下來，" class="headerlink" title="把 Redmine 專案載下來，"></a>把 Redmine 專案載下來，</h3><pre><code>wget http://www.redmine.org/releases/redmine-3.2.0.zip</code></pre><h3 id="解壓縮"><a href="#解壓縮" class="headerlink" title="解壓縮"></a>解壓縮</h3><pre><code>unzip redmine-3.2.0.zip</code></pre><p>現在你有一個 Redmine 的 Rails 專案了。</p><h3 id="對-Rails-專案的一些處理"><a href="#對-Rails-專案的一些處理" class="headerlink" title="對 Rails 專案的一些處理"></a>對 Rails 專案的一些處理</h3><p>bundle 一下。可能會有一些 Ubuntu 的套件沒有裝會噴錯誤。不過都還滿簡單的。</p><pre><code>bundle install</code></pre><p>缺少 imagemagick 的話可以下下面指令。</p><pre><code>sudo apt-get install imagemagicksudo apt-get install libmagickwand-dev</code></pre><h3 id="Rails-資料庫處理"><a href="#Rails-資料庫處理" class="headerlink" title="Rails 資料庫處理"></a>Rails 資料庫處理</h3><pre><code>rake db:createrake db:migrate</code></pre><p>建之前要更新一下 config/database.yml 的內容，把 mysql 帳號密碼寫進去。</p><h3 id="安裝-Passenger"><a href="#安裝-Passenger" class="headerlink" title="安裝 Passenger"></a>安裝 Passenger</h3><pre><code>gem install passenger --no-ri --no-rdoc</code></pre><p>使用 Passenger 安裝 nginx</p><pre><code>rvmsudo passenger-install-nginx-module</code></pre><h3 id="安装-Nginx-init-script"><a href="#安装-Nginx-init-script" class="headerlink" title="安装 Nginx init script"></a>安装 Nginx init script</h3><pre><code>cd ~/git clone git://github.com/jnstq/rails-nginx-passenger-ubuntu.gitsudo mv rails-nginx-passenger-ubuntu/nginx/nginx /etc/init.d/nginxsudo chmod +x /etc/init.d/nginx</code></pre><h3 id="開機自動啟動"><a href="#開機自動啟動" class="headerlink" title="開機自動啟動"></a>開機自動啟動</h3><pre><code>sudo update-rc.d nginx defaults</code></pre><h2 id="設定-nginx-conf"><a href="#設定-nginx-conf" class="headerlink" title="設定 nginx.conf"></a>設定 nginx.conf</h2><h3 id="打開-nginx-conf"><a href="#打開-nginx-conf" class="headerlink" title="打開 nginx.conf"></a>打開 nginx.conf</h3><pre><code>sudo vim /opt/nginx/conf/nginx.conf</code></pre><h3 id="添加-redmine-的配置"><a href="#添加-redmine-的配置" class="headerlink" title="添加 redmine 的配置"></a>添加 redmine 的配置</h3><pre><code>server {    listen       80;    server_name  redmine.zhouw; # 请替换成你网站的域名    rails_env    production;    root         /srv/www/redmine/public;    passenger_enabled on;    location ~ ^(/assets) {        access_log        off;        # 设置 assets 下面的浏览器缓存时间为最大值（由于 Rails Assets Pipline 的文件名是根据文件修改产生的 MD5 digest 文件名，所以此处可以放心开启）        expires           max;    }}</code></pre><h3 id="重新啟動-Nginx"><a href="#重新啟動-Nginx" class="headerlink" title="重新啟動 Nginx"></a>重新啟動 Nginx</h3><pre><code>sudo /etc/init.d/nginx start</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-ubuntu&quot;&gt;&lt;a href=&quot;#安装-ubuntu&quot; class=&quot;headerlink&quot; title=&quot;安装 ubuntu&quot;&gt;&lt;/a&gt;安装 ubuntu&lt;/h2&gt;&lt;h3 id=&quot;配置网络&quot;&gt;&lt;a href=&quot;#配置网络&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="linux" scheme="http://idc.wf/category/linux/"/>
    
    
      <category term="virtualbox" scheme="http://idc.wf/tags/virtualbox/"/>
    
      <category term="ubuntu" scheme="http://idc.wf/tags/ubuntu/"/>
    
      <category term="redmine" scheme="http://idc.wf/tags/redmine/"/>
    
  </entry>
  
  <entry>
    <title>centos-delete-php</title>
    <link href="http://idc.wf/2016/01/26/centos-delete-php/"/>
    <id>http://idc.wf/2016/01/26/centos-delete-php/</id>
    <published>2016-01-26T14:50:37.000Z</published>
    <updated>2018-05-01T04:16:08.938Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可以编译删除的"><a href="#可以编译删除的" class="headerlink" title="可以编译删除的"></a>可以编译删除的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make   uninstall</span><br><span class="line">make   clean</span><br><span class="line">rm -rf php   //php目录</span><br></pre></td></tr></table></figure><h3 id="单独的可执行文件"><a href="#单独的可执行文件" class="headerlink" title="单独的可执行文件"></a>单独的可执行文件</h3><p>whereis xxx 找到软件安装目录，rm -rf 把这些目录都删除</p><h3 id="重新编译安装发"><a href="#重新编译安装发" class="headerlink" title="重新编译安装发"></a>重新编译安装发</h3><p>找一个临时目录重新安装一遍。比如./configure –prefix=/tmp/to_remove &amp;&amp; make install<br>然后遍历/tmp/to_remove里的文件，把你原来安装位置的文件都删除。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;可以编译删除的&quot;&gt;&lt;a href=&quot;#可以编译删除的&quot; class=&quot;headerlink&quot; title=&quot;可以编译删除的&quot;&gt;&lt;/a&gt;可以编译删除的&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="linux" scheme="http://idc.wf/category/linux/"/>
    
    
      <category term="linux" scheme="http://idc.wf/tags/linux/"/>
    
      <category term="php" scheme="http://idc.wf/tags/php/"/>
    
      <category term="delete" scheme="http://idc.wf/tags/delete/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下php安装mcrypt扩展</title>
    <link href="http://idc.wf/2016/01/26/centos-php-mcrypt/"/>
    <id>http://idc.wf/2016/01/26/centos-php-mcrypt/</id>
    <published>2016-01-26T14:41:04.000Z</published>
    <updated>2018-05-01T04:16:08.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="确认你的linux没有安装mcrypt库，如果已安装，跳过安装步骤"><a href="#确认你的linux没有安装mcrypt库，如果已安装，跳过安装步骤" class="headerlink" title="确认你的linux没有安装mcrypt库，如果已安装，跳过安装步骤"></a>确认你的linux没有安装mcrypt库，如果已安装，跳过安装步骤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@test-206 ~]# yum list installed|grep mcrypt</span><br><span class="line">libmcrypt.x86_64                          2.5.8-4.el5.centos           installed</span><br><span class="line">libmcrypt-devel.x86_64                    2.5.8-4.el5.centos           installed</span><br><span class="line">mcrypt.x86_64                             2.6.8-1.el5                  installed</span><br></pre></td></tr></table></figure><p>以上显示已经安装过，若没有，则按以下两种方式安装</p><h3 id="yum命令懒人安装"><a href="#yum命令懒人安装" class="headerlink" title="yum命令懒人安装"></a>yum命令懒人安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libmcrypt libmcrypt-devel mcrypt mhash</span><br></pre></td></tr></table></figure><p>执行后会显示即将安装的相关库，你可以根据你的linux限定x86_64或者i386，如yum install libmcrypt.x86_64（如果yum命令无法连接仓库，请检查你的/etc/yum.repos.d/里的文件正确性，以及你的/etc/host是不是可达里面的域名）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">================================================================================</span><br><span class="line"> Package              Arch        Version                   Repository     Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> libmcrypt            i386        2.5.7-5.el5               epel          124 k</span><br><span class="line"> libmcrypt            x86_64      2.5.8-4.el5.centos        extras        105 k</span><br><span class="line"> libmcrypt-devel      i386        2.5.7-5.el5               epel          103 k</span><br><span class="line"> libmcrypt-devel      x86_64      2.5.8-4.el5.centos        extras         10 k</span><br><span class="line"> mcrypt               x86_64      2.6.8-1.el5               epel           88 k</span><br><span class="line"> mhash                i386        0.9.2-6.el5               epel          141 k</span><br><span class="line"> mhash                x86_64      0.9.9-1.el5.rf            rpmforge      161 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install       7 Package(s)</span><br><span class="line">Upgrade       0 Package(s)</span><br><span class="line"></span><br><span class="line">Total download size: 731 k</span><br><span class="line">Is this ok [y/N]:</span><br></pre></td></tr></table></figure><p>确定安装，最后显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Installed:</span><br><span class="line">  libmcrypt.x86_64 0:2.5.8-4.el5.centos</span><br><span class="line">  libmcrypt-devel.x86_64 0:2.5.8-4.el5.centos</span><br><span class="line">  mcrypt.x86_64 0:2.6.8-1.el5</span><br><span class="line">  mhash.x86_64 0:0.9.9-1.el5.rf</span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><h3 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h3><h4 id="去http-www-sourceforge-net下载Libmcrypt-mhash-mcrypt安装包"><a href="#去http-www-sourceforge-net下载Libmcrypt-mhash-mcrypt安装包" class="headerlink" title="去http://www.sourceforge.net下载Libmcrypt,mhash,mcrypt安装包"></a>去<a href="http://www.sourceforge.net下载Libmcrypt,mhash,mcrypt安装包" target="_blank" rel="noopener">http://www.sourceforge.net下载Libmcrypt,mhash,mcrypt安装包</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libmcrypt(libmcrypt-2.5.8.tar.gz )：</span><br><span class="line">mcrypt(mcrypt-2.6.8.tar.gz ):</span><br><span class="line">mhash(mhash-0.9.9.9.tar.gz ):</span><br></pre></td></tr></table></figure><p>####先安装Libmcrypt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#tar -zxvf libmcrypt-2.5.8.tar.gz</span><br><span class="line">#cd libmcrypt-2.5.8</span><br><span class="line">#./configure</span><br><span class="line">#make</span><br><span class="line">#make install 说明：libmcript默认安装在/usr/local</span><br></pre></td></tr></table></figure><h4 id="安装mhash"><a href="#安装mhash" class="headerlink" title="安装mhash"></a>安装mhash</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#tar -zxvf mhash-0.9.9.9.tar.gz</span><br><span class="line">#cd mhash-0.9.9.9</span><br><span class="line">#./configure</span><br><span class="line">#make</span><br><span class="line">#make install</span><br></pre></td></tr></table></figure><h4 id="安装mcrypt"><a href="#安装mcrypt" class="headerlink" title="安装mcrypt"></a>安装mcrypt</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#tar -zxvf mcrypt-2.6.8.tar.gz</span><br><span class="line">#cd mcrypt-2.6.8</span><br><span class="line">#LD_LIBRARY_PATH=/usr/local/lib ./configure</span><br><span class="line">#make</span><br><span class="line">#make install</span><br></pre></td></tr></table></figure><p>最后，还是检查下，是否安装成功</p><h2 id="安装php的mcrypt扩展-动态加载编译"><a href="#安装php的mcrypt扩展-动态加载编译" class="headerlink" title="安装php的mcrypt扩展(动态加载编译)"></a>安装php的mcrypt扩展(动态加载编译)</h2><p>下载php下的mcrypt扩展或者直接下载php的完整安装包</p><p><a href="http://cn.php.net/releases/" target="_blank" rel="noopener">http://cn.php.net/releases/</a> 网页下找到自己服务器的php版本，下载后tar解压（本人的是php5.3.3）</p><p>进入ext/mcrypt文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@*_* 14:45 ~]# cd php-5.3.3/ext/mcrypt/</span><br></pre></td></tr></table></figure><p>执行phpize命令（phpize是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块，如果没有？yum install php53-devel里包含了，或者其他方法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@*_* 14:48 mcrypt]# whereis phpize    //为了确定phpize存在</span><br><span class="line">phpize: /usr/bin/phpize /usr/share/man/man1/phpize.1.gz</span><br><span class="line">[root@*_* 14:48 mcrypt]# phpize</span><br><span class="line">Configuring for:</span><br><span class="line">PHP Api Version:         20090626</span><br><span class="line">Zend Module Api No:      20090626</span><br><span class="line">Zend Extension Api No:   220090626</span><br></pre></td></tr></table></figure><p>执行完后，会发现当前目录下多了一些configure文件，最后执行php-config命令就基本完成了</p><p>执行以下命令，确保你的/usr/bin/php-config是存在的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@*_* 15:02 mcrypt]# whereis php-config</span><br><span class="line">php-config: /usr/bin/php-config /usr/share/man/man1/php-config.1.gz</span><br><span class="line">[root@*_* 15:02 mcrypt]# ./configure --with-php-config=/usr/bin/php-config</span><br></pre></td></tr></table></figure><p>如果遇到以下错误，请先安装gcc，命令yum install gcc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configure: error: no acceptable C compiler found in $PATH</span><br></pre></td></tr></table></figure></p><p>直到不报错，出现：config.status: creating config.h，执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@*_* 15:06 mcrypt]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>最后的最后，会提示你如下，说明你大功告成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Installing shared extensions:     /usr/lib64/php/modules/</span><br></pre></td></tr></table></figure><p>顺便检查下/usr/lib64/php/modules/里的mrcypt.so扩展是否已经创建成功</p><p>然后的事就简单了，给你的php.ini添加一条extension=mcrypt.so</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@*_* 15:09 mcrypt]# cd /etc/php.d</span><br></pre></td></tr></table></figure><p>创建一个mrcypt.ini文件就行，里面写extension=mcrypt.so</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@*_* 15:17 php.d]# echo &apos;extension=mcrypt.so&apos; &gt; mcrypt.ini</span><br></pre></td></tr></table></figure><h2 id="重启apache，查阅phpinfo，mcrypt模块扩展是不是加载了？"><a href="#重启apache，查阅phpinfo，mcrypt模块扩展是不是加载了？" class="headerlink" title="重启apache，查阅phpinfo，mcrypt模块扩展是不是加载了？"></a>重启apache，查阅phpinfo，mcrypt模块扩展是不是加载了？</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;确认你的linux没有安装mcrypt库，如果已安装，跳过安装步骤&quot;&gt;&lt;a href=&quot;#确认你的linux没有安装mcrypt库，如果已安装，跳过安装步骤&quot; class=&quot;headerlink&quot; title=&quot;确认你的linux没有安装mcrypt库，如果已安装
      
    
    </summary>
    
      <category term="linux" scheme="http://idc.wf/category/linux/"/>
    
    
      <category term="linux" scheme="http://idc.wf/tags/linux/"/>
    
      <category term="php" scheme="http://idc.wf/tags/php/"/>
    
      <category term="mcrypt" scheme="http://idc.wf/tags/mcrypt/"/>
    
  </entry>
  
  <entry>
    <title>[root]一条命令开启 Google Now &amp; 位置报告</title>
    <link href="http://idc.wf/2016/01/23/root-google-now/"/>
    <id>http://idc.wf/2016/01/23/root-google-now/</id>
    <published>2016-01-23T06:18:57.000Z</published>
    <updated>2018-05-01T04:16:08.946Z</updated>
    
    <content type="html"><![CDATA[<p>使用 root 权限运行以下命令(重启后失效)</p><pre><code>setprop gsm.sim.operator.alpha &quot;AT&amp;T&quot; &amp;&amp; setprop gsm.sim.operator.iso-country &quot;us&quot; &amp;&amp; setprop gsm.sim.operator.numeric &quot;310090&quot;</code></pre><p>一段时间（几小时）后 Google Now 就能打开了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 root 权限运行以下命令(重启后失效)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setprop gsm.sim.operator.alpha &amp;quot;AT&amp;amp;T&amp;quot; &amp;amp;&amp;amp; 
setprop gsm.sim.operator.iso-count
      
    
    </summary>
    
      <category term="linux" scheme="http://idc.wf/category/linux/"/>
    
    
      <category term="linux" scheme="http://idc.wf/tags/linux/"/>
    
      <category term="android" scheme="http://idc.wf/tags/android/"/>
    
      <category term="google now" scheme="http://idc.wf/tags/google-now/"/>
    
  </entry>
  
  <entry>
    <title>HTTP_X_FORWARDED_PROTO</title>
    <link href="http://idc.wf/2015/12/30/HTTP-X-FORWARDED-PROTO/"/>
    <id>http://idc.wf/2015/12/30/HTTP-X-FORWARDED-PROTO/</id>
    <published>2015-12-30T18:08:26.000Z</published>
    <updated>2018-05-01T04:16:08.938Z</updated>
    
    <content type="html"><![CDATA[<p>yii2 框架中根据 2 个值判断是不是 https ，如下：</p><pre><code>isset($\_SERVER[&apos;HTTPS&apos;]) &amp;&amp; (strcasecmp($\_SERVER[&apos;HTTPS&apos;], &apos;on&apos;) === 0 || $\_SERVER[&apos;HTTPS&apos;] == 1) ||isset($\_SERVER[&apos;HTTP_X_FORWARDED_PROTO&apos;]) &amp;&amp; strcasecmp($\_SERVER[&apos;HTTP_X_FORWARDED_PROTO&apos;], &apos;https&apos;) === 0;</code></pre><p>其中 HTTPS 这个值比较好理解，直接查询服务器有没有配置过 HTTPS 就可以知道了。<br>但是， HTTP_X_FORWARDED_PROTO 这个值我就没看懂是什么意思，而且在网上查了蛮多资料，一般来说，是有设置过下面的值</p><pre><code>proxy_set_header   X-Forwarded-Proto $scheme;</code></pre><p>之后，才可以在 php 的 $_SERVER 中看到这个值，但是我们目前的服务器配置中并没有设置过这些内容，那么这个值是怎么来的呢？<br>先记下来，后面有头绪了再说。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;yii2 框架中根据 2 个值判断是不是 https ，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;isset($\_SERVER[&amp;apos;HTTPS&amp;apos;]) &amp;amp;&amp;amp; (strcasecmp($\_SERVER[&amp;apos;HTTPS&amp;apos;], &amp;
      
    
    </summary>
    
      <category term="web" scheme="http://idc.wf/category/web/"/>
    
    
      <category term="linux" scheme="http://idc.wf/tags/linux/"/>
    
      <category term="yii" scheme="http://idc.wf/tags/yii/"/>
    
      <category term="php" scheme="http://idc.wf/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>mysql 导入导出数据</title>
    <link href="http://idc.wf/2015/12/30/mysqldump/"/>
    <id>http://idc.wf/2015/12/30/mysqldump/</id>
    <published>2015-12-30T18:04:30.000Z</published>
    <updated>2018-05-01T04:16:08.942Z</updated>
    
    <content type="html"><![CDATA[<p>##　导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：</p><h3 id="导出数据和表结构："><a href="#导出数据和表结构：" class="headerlink" title="导出数据和表结构："></a>导出数据和表结构：</h3><pre><code>mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.sql#/usr/local/mysql/bin/   mysqldump -uroot -p abc &gt; abc.sql敲回车后会提示输入密码</code></pre><h3 id="只导出表结构"><a href="#只导出表结构" class="headerlink" title="只导出表结构"></a>只导出表结构</h3><pre><code>mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.sql#/usr/local/mysql/bin/   mysqldump -uroot -p -d abc &gt; abc.sql</code></pre><p>注：/usr/local/mysql/bin/  —&gt;  mysql的data目录</p><h2 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h2><h3 id="首先建空数据库"><a href="#首先建空数据库" class="headerlink" title="首先建空数据库"></a>首先建空数据库</h3><pre><code>mysql&gt;create database abc;</code></pre><h3 id="导入数据库-1"><a href="#导入数据库-1" class="headerlink" title="导入数据库"></a>导入数据库</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><ol><li>选择数据库<br> mysql&gt;use abc;</li><li>设置数据库编码<br> mysql&gt;set names utf8;</li><li>导入数据（注意sql文件的路径）<br> mysql&gt;source /home/abc/abc.sql;<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4> mysql -u用户名 -p密码 数据库名 &lt; 数据库名.sql<br> #mysql -uabc_f -p abc &lt; abc.sql</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##　导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：&lt;/p&gt;
&lt;h3 id=&quot;导出数据和表结构：&quot;&gt;&lt;a href=&quot;#导出数据和表结构：&quot; class=&quot;headerlink&quot; title=&quot;导出数据和表结构：&quot;&gt;&lt;/a&gt;导出数据和表结构
      
    
    </summary>
    
      <category term="web" scheme="http://idc.wf/category/web/"/>
    
    
      <category term="linux" scheme="http://idc.wf/tags/linux/"/>
    
      <category term="mysql" scheme="http://idc.wf/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>让域名邮箱支持通配符</title>
    <link href="http://idc.wf/2015/08/03/mailgun/"/>
    <id>http://idc.wf/2015/08/03/mailgun/</id>
    <published>2015-08-03T07:30:00.000Z</published>
    <updated>2018-05-01T04:16:08.942Z</updated>
    
    <content type="html"><![CDATA[<p>目前手贱收了一个域名，想配置成支持泛域名解析的邮箱地址，即随便写名称都可以寄到的邮件。</p><p>之前有用 QQ 企业邮箱做过一个泛解析的域名，规则是错误的邮箱地址都转发到一个固定地址，参见地址 <a href="http://service.exmail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=23&amp;&amp;no=1000815" target="_blank" rel="noopener">什么是错误地址转发功能？</a>。</p><p>后来 Google Domails 推出后，推出了域名 EMAIL 服务，支持 * 通配符，于是开心了，参见地址<a href="https://support.google.com/domains/answer/3251241?hl=en_US#wildcard" target="_blank" rel="noopener">About wildcard email forwarding</a>。</p><p>但是，新入的域名 Google Domails 不支持这种后缀，于是在 @duyaoo 的推荐下，用了 <a href="https://mailgun.com/" target="_blank" rel="noopener">mailgun</a> 服务。</p><p>这个服务本身是作为商业邮件API使用的，自用算是小 case 。</p><p>按照教程设置玩 DNS 之后，添加一条 routes 规则，指定 什么地址的邮件发送到那个邮箱就可以了。</p><p>以后做小项目的时候也可以用 mailgun 来做邮箱地址托管了，赞一个。</p><p>注：</p><pre><code>添加 mx 地址解析的时候 name 为 @re 域名注册地址：[internetbs.net](https://internetbs.net/)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前手贱收了一个域名，想配置成支持泛域名解析的邮箱地址，即随便写名称都可以寄到的邮件。&lt;/p&gt;
&lt;p&gt;之前有用 QQ 企业邮箱做过一个泛解析的域名，规则是错误的邮箱地址都转发到一个固定地址，参见地址 &lt;a href=&quot;http://service.exmail.qq.com
      
    
    </summary>
    
      <category term="web" scheme="http://idc.wf/category/web/"/>
    
    
      <category term="mail" scheme="http://idc.wf/tags/mail/"/>
    
      <category term="domain" scheme="http://idc.wf/tags/domain/"/>
    
  </entry>
  
  <entry>
    <title>laravel 部署</title>
    <link href="http://idc.wf/2015/01/29/laravel/"/>
    <id>http://idc.wf/2015/01/29/laravel/</id>
    <published>2015-01-29T16:00:00.000Z</published>
    <updated>2018-05-01T04:16:08.942Z</updated>
    
    <content type="html"><![CDATA[<p>看最近 laravel 好像蛮流行的，部署一个玩玩。</p><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><h3 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h3><pre><code>$ curl -sS https://getcomposer.org/installer | php$ mv composer.phar /usr/local/bin/composer</code></pre><p>这个就是传说中的 php 的包管理器了，之前没怎么用过。</p><h3 id="PEAR"><a href="#PEAR" class="headerlink" title="PEAR"></a>PEAR</h3><p>Download PEAR</p><pre><code>curl -O http://pear.php.net/go-pear.pharsudo php -d detect_unicode=0 go-pear.phar</code></pre><p>Configure and Install PEAR</p><p>You should now be at a prompt to configure PEAR.</p><p>Type 1 and press return .<br>Enter:</p><pre><code>/usr/local/pear</code></pre><p>Type 4 and press return .</p><p>Enter:</p><pre><code>/usr/local/bin</code></pre><p>Press return</p><p>Verify PEAR</p><p>You should be able to type:</p><pre><code>pear version</code></pre><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><pre><code>apt-get install php5-json</code></pre><h3 id="mcrypt"><a href="#mcrypt" class="headerlink" title="mcrypt"></a>mcrypt</h3><pre><code>sudo rm /etc/php5/mods-available/mcrypt.inisudo apt-get purge php5-mcryptsudo apt-get install mcryptsudo apt-get install php5-mcryptsudo php5enmod mcryptsudo service php5-fpm restart</code></pre><h2 id="安装-Laravel"><a href="#安装-Laravel" class="headerlink" title="安装 Laravel"></a>安装 Laravel</h2><p>首先，通过 Composer 下载 Laravel 安装器。</p><pre><code>composer global require &quot;laravel/installer=~1.1&quot;</code></pre><p>请确保把 ~/.composer/vendor/bin 路径添加到 PATH 环境变量里, 这样laravel 可执行文件才能被命令行找到, 以后您就可以在命令行下直接使用 laravel 命令.<br>安装成功后, 可以使用命令 laravel new 在您指定的目录下创建一份全新安装的 Laravel。例如，laravel new blog 将会在当前目录下创建一个叫 blog 的目录, 此目录里面存放着全新安装的 Laravel 以及其依赖的工具包。这种安装方法比通过 Composer 安装要快许多。</p><h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><pre><code>location / {    try_files $uri $uri/ /index.php?$query_string;}</code></pre><p>这样访问地址就更好看了。</p><h2 id="配置版本控制"><a href="#配置版本控制" class="headerlink" title="配置版本控制"></a>配置版本控制</h2><p>进到 Laravel目录，执行 git init 初始化 git 项目，然后执行下面的命令链接到远程仓库：</p><pre><code>git remote add origin git@123.comgit checkout master -fgit pullgit add .git commit -m &apos;update&apos;git push</code></pre><p>于是，可以远程修改了。</p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="Error-in-exception-handler"><a href="#Error-in-exception-handler" class="headerlink" title="Error in exception handler"></a>Error in exception handler</h3><p>出现如题错误 先开启laravel的调试模式:<br>app/config/app.php 文件中</p><pre><code>&apos;debug&apos; =&gt; flase,修改成 &apos;debug&apos; =&gt; true,</code></pre><p>开启调试模式后就能非常清楚的知道出错的原因了,app/storage 目录的权限问题,运行apache服务器的默认用户是www-data所以解决如下</p><pre><code>sudo chown -R www-data:www-data app/storage</code></pre><p>原因是文件夹目录没有写权限。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看最近 laravel 好像蛮流行的，部署一个玩玩。&lt;/p&gt;
&lt;h2 id=&quot;基础环境&quot;&gt;&lt;a href=&quot;#基础环境&quot; class=&quot;headerlink&quot; title=&quot;基础环境&quot;&gt;&lt;/a&gt;基础环境&lt;/h2&gt;&lt;h3 id=&quot;composer&quot;&gt;&lt;a href=&quot;#com
      
    
    </summary>
    
      <category term="web" scheme="http://idc.wf/category/web/"/>
    
    
      <category term="laravel" scheme="http://idc.wf/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>python 版本 shadowsocks</title>
    <link href="http://idc.wf/2015/01/13/pip-ss/"/>
    <id>http://idc.wf/2015/01/13/pip-ss/</id>
    <published>2015-01-13T16:00:00.000Z</published>
    <updated>2018-05-01T04:16:08.946Z</updated>
    
    <content type="html"><![CDATA[<p>因为墙更高了， fqrouter 都用不了了，没办法，只能把之前的 ss 拿起来用了。<br>这次重新使用 python 版本的 ss。</p><p>首先，安装</p><pre><code>apt-get updateapt-get install python-pip python-m2crypto supervisorpip install shadowsocks</code></pre><p>执行</p><pre><code>service supervisor startsupervisorctl reload</code></pre><p>如果遇到问题，可以检查日志：</p><pre><code>supervisorctl tail -f shadowsocks stderr</code></pre><p>如果修改了 shadowsocks 配置 /etc/shadowsocks.json， 可以重启 shadowsocks：</p><pre><code>supervisorctl restart shadowsocks</code></pre><p>如果修改了 Supervisor 的配置文件 /etc/supervisor/*， 可以更新 supervisor 配置：</p><pre><code>supervisorctl update</code></pre><p>Shadowsocks 的服务单独启动方法：</p><pre><code>ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d stop</code></pre><p>结束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为墙更高了， fqrouter 都用不了了，没办法，只能把之前的 ss 拿起来用了。&lt;br&gt;这次重新使用 python 版本的 ss。&lt;/p&gt;
&lt;p&gt;首先，安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get update
apt-get install python-pi
      
    
    </summary>
    
      <category term="web" scheme="http://idc.wf/category/web/"/>
    
    
      <category term="shadowsocks" scheme="http://idc.wf/tags/shadowsocks/"/>
    
      <category term="supervisor" scheme="http://idc.wf/tags/supervisor/"/>
    
      <category term="fqrouter" scheme="http://idc.wf/tags/fqrouter/"/>
    
  </entry>
  
  <entry>
    <title>Mac 常用应用列表</title>
    <link href="http://idc.wf/2015/01/13/mac-apps/"/>
    <id>http://idc.wf/2015/01/13/mac-apps/</id>
    <published>2015-01-13T16:00:00.000Z</published>
    <updated>2018-05-01T04:16:08.942Z</updated>
    
    <content type="html"><![CDATA[<h3 id="系统类"><a href="#系统类" class="headerlink" title="系统类"></a>系统类</h3><h4 id="Moom"><a href="#Moom" class="headerlink" title="Moom"></a>Moom</h4><pre><code>非常实用的窗口位置调整工具，哈哈，终于不用羡慕 windos 下面的 win + 箭头 快捷键了。</code></pre><h4 id="CleanMyMac2"><a href="#CleanMyMac2" class="headerlink" title="CleanMyMac2"></a>CleanMyMac2</h4><pre><code>几乎算是必备的工具了，清理系统什么的很好用的。</code></pre><h4 id="synergy"><a href="#synergy" class="headerlink" title="synergy"></a>synergy</h4><pre><code>鼠标键盘共享工具，终于可以用一套鼠标键盘控制三台电脑了[mac, windows, ubuntu]。</code></pre><h4 id="cheatsheet"><a href="#cheatsheet" class="headerlink" title="cheatsheet"></a>cheatsheet</h4><pre><code>记不住帮助快捷键的某只最喜欢的东西。</code></pre><h4 id="live-Wallpaper"><a href="#live-Wallpaper" class="headerlink" title="live Wallpaper"></a>live Wallpaper</h4><pre><code>啊，真好看的桌面背景阿。</code></pre><h4 id="freeMemory-Pro"><a href="#freeMemory-Pro" class="headerlink" title="freeMemory Pro"></a>freeMemory Pro</h4><pre><code>某只上次机器卡死之后找到的工具，这次不怕内存用尽了。</code></pre><h4 id="homebrew"><a href="#homebrew" class="headerlink" title="homebrew"></a>homebrew</h4><pre><code>几乎必备的 mac 包管理工具。</code></pre><h3 id="网络类"><a href="#网络类" class="headerlink" title="网络类"></a>网络类</h3><h4 id="GoAgentX"><a href="#GoAgentX" class="headerlink" title="GoAgentX"></a>GoAgentX</h4><pre><code>墙内用户必备的应用，你懂的。</code></pre><h4 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h4><pre><code>谷粉必备。</code></pre><h4 id="xmarks"><a href="#xmarks" class="headerlink" title="xmarks"></a>xmarks</h4><pre><code>书签跨平台同步必备啊，为了他，我 chrome, firefox 的书签同步功能都是关闭了的。</code></pre><h4 id="TeamViewer"><a href="#TeamViewer" class="headerlink" title="TeamViewer"></a>TeamViewer</h4><pre><code>mac 也是可以远程办公的，就是因为这个。</code></pre><h4 id="YoruFukurou"><a href="#YoruFukurou" class="headerlink" title="YoruFukurou"></a>YoruFukurou</h4><pre><code>twitter 客户端，刚刚别的朋友哪里知道的，用着还不错，先加进来吧。</code></pre><h4 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h4><pre><code>国内你懂的。</code></pre><h4 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h4><pre><code>国内你懂的。</code></pre><h3 id="开发类"><a href="#开发类" class="headerlink" title="开发类"></a>开发类</h3><h4 id="zoc6"><a href="#zoc6" class="headerlink" title="zoc6"></a>zoc6</h4><pre><code>ssh 管理工具，这下不怕终端里分不清那台机器了。</code></pre><h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h4><pre><code>zsh 扩展，哈哈，哈哈。</code></pre><h4 id="TextMate"><a href="#TextMate" class="headerlink" title="TextMate"></a>TextMate</h4><pre><code>我把它当作是 mac 机器上面的默认文本编辑器那样用。</code></pre><h4 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h4><pre><code>编辑简单的脚本文件的时候用。</code></pre><h4 id="PhpStorm"><a href="#PhpStorm" class="headerlink" title="PhpStorm"></a>PhpStorm</h4><pre><code>项目开发的时候用。</code></pre><h4 id="Tower"><a href="#Tower" class="headerlink" title="Tower"></a>Tower</h4><pre><code>到目前为止，觉得最好的 mac 上的 git 客户端。</code></pre><h4 id="Navicat-Premium"><a href="#Navicat-Premium" class="headerlink" title="Navicat Premium"></a>Navicat Premium</h4><pre><code>目前用习惯的数据库管理工具。</code></pre><h4 id="Araxis-Merge"><a href="#Araxis-Merge" class="headerlink" title="Araxis Merge"></a>Araxis Merge</h4><pre><code>干净最好的版本管理工具。</code></pre><h4 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h4><pre><code>装着玩的代码编辑器。</code></pre><h4 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h4><pre><code>装着练手的编辑器。</code></pre><h4 id="MacVim"><a href="#MacVim" class="headerlink" title="MacVim"></a>MacVim</h4><pre><code>装着练手的编辑器。</code></pre><h4 id="Mou"><a href="#Mou" class="headerlink" title="Mou"></a>Mou</h4><pre><code>markdown 编辑器，还行。</code></pre><h4 id="MadEdit"><a href="#MadEdit" class="headerlink" title="MadEdit"></a>MadEdit</h4><pre><code>装来缅怀的跨平台编辑器。</code></pre><h4 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h4><pre><code>跨平台的抓包工具，开发用。</code></pre><p>待补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;系统类&quot;&gt;&lt;a href=&quot;#系统类&quot; class=&quot;headerlink&quot; title=&quot;系统类&quot;&gt;&lt;/a&gt;系统类&lt;/h3&gt;&lt;h4 id=&quot;Moom&quot;&gt;&lt;a href=&quot;#Moom&quot; class=&quot;headerlink&quot; title=&quot;Moom&quot;&gt;&lt;/a&gt;Moo
      
    
    </summary>
    
      <category term="mac" scheme="http://idc.wf/category/mac/"/>
    
    
      <category term="app" scheme="http://idc.wf/tags/app/"/>
    
      <category term="mac" scheme="http://idc.wf/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>P2P 微薄</title>
    <link href="http://idc.wf/2014/07/27/twister/"/>
    <id>http://idc.wf/2014/07/27/twister/</id>
    <published>2014-07-27T16:00:00.000Z</published>
    <updated>2018-05-01T04:16:08.946Z</updated>
    
    <content type="html"><![CDATA[<p>twister 是</p><pre><code>twister 本质上是一个不需要中心服务器的 twitter。twister 不需要中心服务器，它使用基于比特币与 bt 下载的技术来构建一个 p2p 的网络，你的消息存放在这个 p2p 网络中，只要你在任何有互联网接入的地方，理论上都可以连入 twister 网络，使用全部功能。twister 网络上没有任何管理员对你的言论进行审查与过滤！ 使用 twister 不需要翻墙。你的消息一经发表，无法删除！</code></pre><p>所以，来愉快的玩耍吧。</p><p><a href="http://twister.net.co/" target="_blank" rel="noopener">官方地址</a><br><a href="http://wiki.twister.net.co/w/zh:using:twister_beginner_guide:start_twister_on_windows" target="_blank" rel="noopener">官方wiki</a></p><p>推荐 windows 下客户端：<a href="https://github.com/iShift/twister-webkit" target="_blank" rel="noopener">https://github.com/iShift/twister-webkit</a></p><p>顺便说一句，最近墙越来越高了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;twister 是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;twister 本质上是一个不需要中心服务器的 twitter。
twister 不需要中心服务器，它使用基于比特币与 bt 下载的技术来构建一个 p2p 的网络，你的消息存放在这个 p2p 网络中，只要你在任何有互联网接入
      
    
    </summary>
    
      <category term="web" scheme="http://idc.wf/category/web/"/>
    
    
      <category term="twitter" scheme="http://idc.wf/tags/twitter/"/>
    
      <category term="twister" scheme="http://idc.wf/tags/twister/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks 新手指南</title>
    <link href="http://idc.wf/2014/06/01/shadowsocks/"/>
    <id>http://idc.wf/2014/06/01/shadowsocks/</id>
    <published>2014-06-01T16:00:00.000Z</published>
    <updated>2018-05-01T04:16:08.946Z</updated>
    
    <content type="html"><![CDATA[<p>#Shadowsocks</p><p>shadowsocks 簡稱 ss 是一套的代理協議，包含服務端應用和客戶端應用。使用 ss:// 格式的鏈接協議來標識服務器地址。</p><h2 id="客戶端"><a href="#客戶端" class="headerlink" title="客戶端"></a>客戶端</h2><p>如果你已經有了服務器地址，那麼我們就直接來配置客戶端吧，如果沒有，那麼你需要去找IT男要一個，或者去 <a href="https://www.shadowsocks.net/" target="_blank" rel="noopener">ShadowSocks公益组织</a> 找一個吧。</p><p>參見： <a href="https://github.com/clowwindy/shadowsocks/wiki/Ports-and-Clients" target="_blank" rel="noopener">Shadowsocks 客戶端列表</a></p><h2 id="Windows-amp-amp-Linux-amp-amp-OSX"><a href="#Windows-amp-amp-Linux-amp-amp-OSX" class="headerlink" title="Windows &amp;&amp; Linux &amp;&amp; OSX"></a>Windows &amp;&amp; Linux &amp;&amp; OSX</h2><p>鄙人平常主用 <a href="https://github.com/cyfdecyf/cow" target="_blank" rel="noopener">cow</a> ,這個客戶端用 golang 語言編寫，是一个简化穿墙的 HTTP 代理服务器。它能自动检测被墙网站，仅对这些网站使用二级代理，支持 http,ssh 轉發 直接支持 ss ，所以可以用 cow 做二級代理來支持本地其他類型的代理。<br>比如： 用 cow 轉發 http,ssh,ss 到 pac 代理，讓本地的瀏覽器手機等可以無憂翻牆。</p><h3 id="快速開始"><a href="#快速開始" class="headerlink" title="快速開始"></a>快速開始</h3><p>OS X, Linux (x86, ARM): 执行以下命令（也可用于更新）</p><pre><code>curl -L git.io/cow | bash</code></pre><p>Windows: <a href="http://dl.chenyufei.info/cow/" target="_blank" rel="noopener">点此下载</a></p><p>熟悉 Go 的用户可用 go get github.com/cyfdecyf/cow 从源码安装<br>编辑 ~/.cow/rc (Linux) 或 rc.txt (Windows)，简单的配置例子如下：</p><pre><code>#开头的行是注释，会被忽略# 本地 HTTP 代理地址# 配置 HTTP 和 HTTPS 代理时请填入该地址# 或者在自动代理配置中填入 http://127.0.0.1:7777/paclisten = http://127.0.0.1:7777# SOCKS5 二级代理proxy = socks5://127.0.0.1:1080# HTTP 二级代理proxy = http://127.0.0.1:8080proxy = http://user:password@127.0.0.1:8080# shadowsocks 二级代理proxy = ss://aes-128-cfb:password@1.2.3.4:8388# cow 二级代理proxy = cow://aes-128-cfb:password@1.2.3.4:8388使用 cow 协议的二级代理需要在国外服务器上安装 COW，并使用如下配置：listen = cow://aes-128-cfb:password@0.0.0.0:8388完成配置后启动 COW 并配置好代理即可使用。</code></pre><p>然後修改IE瀏覽器設置， internet 選項 -&gt; 連接 -&gt; 局域網設置 -&gt; 使用自動配置腳本，填入：<a href="http://127.0.0.1:7777/pac" target="_blank" rel="noopener">http://127.0.0.1:7777/pac</a> ，然後就OK了。</p><h2 id="服務端"><a href="#服務端" class="headerlink" title="服務端"></a>服務端</h2><p>Shadowsocks 服務端本身支持 c, go, nodejs, python, erlang 等語言，如果你需要配置服務端，那麼說明你是有一定技術基礎的，請參見官方介紹吧。<a href="https://github.com/clowwindy/shadowsocks/wiki/Ports-and-Clients" target="_blank" rel="noopener">Shadowsocks 服務端</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Shadowsocks&lt;/p&gt;
&lt;p&gt;shadowsocks 簡稱 ss 是一套的代理協議，包含服務端應用和客戶端應用。使用 ss:// 格式的鏈接協議來標識服務器地址。&lt;/p&gt;
&lt;h2 id=&quot;客戶端&quot;&gt;&lt;a href=&quot;#客戶端&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="linux" scheme="http://idc.wf/category/linux/"/>
    
    
      <category term="cow" scheme="http://idc.wf/tags/cow/"/>
    
      <category term="Shadowsocks" scheme="http://idc.wf/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 安装命令行自动补全</title>
    <link href="http://idc.wf/2014/05/14/ubuntu-bash-completion/"/>
    <id>http://idc.wf/2014/05/14/ubuntu-bash-completion/</id>
    <published>2014-05-14T16:00:00.000Z</published>
    <updated>2018-05-01T04:16:08.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ubuntu-安装命令行自动补全"><a href="#ubuntu-安装命令行自动补全" class="headerlink" title="ubuntu 安装命令行自动补全"></a>ubuntu 安装命令行自动补全</h3><pre><code>~# apt-get install bash-completion~# source /etc/bash_completion</code></pre><p>编辑/etc/bash.bashrc，在最后加入如下代码</p><pre><code>[plain]if [ -f /etc/bash_completion ]; then      /etc/bash_completion  fi  </code></pre><p>重新登录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ubuntu-安装命令行自动补全&quot;&gt;&lt;a href=&quot;#ubuntu-安装命令行自动补全&quot; class=&quot;headerlink&quot; title=&quot;ubuntu 安装命令行自动补全&quot;&gt;&lt;/a&gt;ubuntu 安装命令行自动补全&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;~# apt
      
    
    </summary>
    
      <category term="linux" scheme="http://idc.wf/category/linux/"/>
    
    
      <category term="linux" scheme="http://idc.wf/tags/linux/"/>
    
      <category term="bash" scheme="http://idc.wf/tags/bash/"/>
    
      <category term="completion" scheme="http://idc.wf/tags/completion/"/>
    
  </entry>
  
</feed>
